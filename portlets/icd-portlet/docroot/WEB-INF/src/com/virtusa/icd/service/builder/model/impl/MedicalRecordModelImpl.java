/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.virtusa.icd.service.builder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.virtusa.icd.service.builder.model.MedicalRecord;
import com.virtusa.icd.service.builder.model.MedicalRecordModel;
import com.virtusa.icd.service.builder.model.MedicalRecordSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the MedicalRecord service. Represents a row in the &quot;ICD_MedicalRecord&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.virtusa.icd.service.builder.model.MedicalRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MedicalRecordImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see MedicalRecordImpl
 * @see com.virtusa.icd.service.builder.model.MedicalRecord
 * @see com.virtusa.icd.service.builder.model.MedicalRecordModel
 * @generated
 */
@JSON(strict = true)
public class MedicalRecordModelImpl extends BaseModelImpl<MedicalRecord>
	implements MedicalRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a medical record model instance should use the {@link com.virtusa.icd.service.builder.model.MedicalRecord} interface instead.
	 */
	public static final String TABLE_NAME = "ICD_MedicalRecord";
	public static final Object[][] TABLE_COLUMNS = {
			{ "mrId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "mrTestCaseName", Types.VARCHAR },
			{ "msDrg", Types.VARCHAR },
			{ "patientType", Types.VARCHAR },
			{ "patientAge", Types.VARCHAR },
			{ "los", Types.VARCHAR },
			{ "ahrqCategoryCode", Types.VARCHAR },
			{ "ahrqSubCategoryCode", Types.VARCHAR },
			{ "mrTestCaseDescription", Types.VARCHAR },
			{ "icd9AdmittingDx", Types.VARCHAR },
			{ "icd9PrincipalDx", Types.VARCHAR },
			{ "icd9PrincipalProcedure", Types.VARCHAR },
			{ "otherIcd9Dx1", Types.VARCHAR },
			{ "otherIcd9Dx2", Types.VARCHAR },
			{ "otherIcd9Dx3", Types.VARCHAR },
			{ "otherIcd9Pcs1", Types.VARCHAR },
			{ "otherIcd9Pcs2", Types.VARCHAR },
			{ "otherIcd9Pcs3", Types.VARCHAR },
			{ "icd10AdmittingDx", Types.VARCHAR },
			{ "icd10PrincipalDx", Types.VARCHAR },
			{ "icd10PrincipalProcedure", Types.VARCHAR },
			{ "otherIcd10Dx1", Types.VARCHAR },
			{ "otherIcd10Dx2", Types.VARCHAR },
			{ "otherIcd10Dx3", Types.VARCHAR },
			{ "otherIcd10Pcs1", Types.VARCHAR },
			{ "otherIcd10Pcs2", Types.VARCHAR },
			{ "otherIcd10Pcs3", Types.VARCHAR },
			{ "isHistoryAndPsysical", Types.BOOLEAN },
			{ "isDischargeNotes", Types.BOOLEAN },
			{ "isConsultations", Types.BOOLEAN },
			{ "isOperatingNotes", Types.BOOLEAN },
			{ "isPhysicianNotes", Types.BOOLEAN },
			{ "isRadiology", Types.BOOLEAN },
			{ "isGiProcedures", Types.BOOLEAN },
			{ "isEducationalNotes", Types.BOOLEAN },
			{ "file", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table ICD_MedicalRecord (mrId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,mrTestCaseName VARCHAR(75) null,msDrg VARCHAR(75) null,patientType VARCHAR(75) null,patientAge VARCHAR(75) null,los VARCHAR(75) null,ahrqCategoryCode VARCHAR(75) null,ahrqSubCategoryCode VARCHAR(75) null,mrTestCaseDescription VARCHAR(75) null,icd9AdmittingDx VARCHAR(75) null,icd9PrincipalDx VARCHAR(75) null,icd9PrincipalProcedure VARCHAR(75) null,otherIcd9Dx1 VARCHAR(75) null,otherIcd9Dx2 VARCHAR(75) null,otherIcd9Dx3 VARCHAR(75) null,otherIcd9Pcs1 VARCHAR(75) null,otherIcd9Pcs2 VARCHAR(75) null,otherIcd9Pcs3 VARCHAR(75) null,icd10AdmittingDx VARCHAR(75) null,icd10PrincipalDx VARCHAR(75) null,icd10PrincipalProcedure VARCHAR(75) null,otherIcd10Dx1 VARCHAR(75) null,otherIcd10Dx2 VARCHAR(75) null,otherIcd10Dx3 VARCHAR(75) null,otherIcd10Pcs1 VARCHAR(75) null,otherIcd10Pcs2 VARCHAR(75) null,otherIcd10Pcs3 VARCHAR(75) null,isHistoryAndPsysical BOOLEAN,isDischargeNotes BOOLEAN,isConsultations BOOLEAN,isOperatingNotes BOOLEAN,isPhysicianNotes BOOLEAN,isRadiology BOOLEAN,isGiProcedures BOOLEAN,isEducationalNotes BOOLEAN,file VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table ICD_MedicalRecord";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.virtusa.icd.service.builder.model.MedicalRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.virtusa.icd.service.builder.model.MedicalRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static MedicalRecord toModel(MedicalRecordSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		MedicalRecord model = new MedicalRecordImpl();

		model.setMrId(soapModel.getMrId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setMrTestCaseName(soapModel.getMrTestCaseName());
		model.setMsDrg(soapModel.getMsDrg());
		model.setPatientType(soapModel.getPatientType());
		model.setPatientAge(soapModel.getPatientAge());
		model.setLos(soapModel.getLos());
		model.setAhrqCategoryCode(soapModel.getAhrqCategoryCode());
		model.setAhrqSubCategoryCode(soapModel.getAhrqSubCategoryCode());
		model.setMrTestCaseDescription(soapModel.getMrTestCaseDescription());
		model.setIcd9AdmittingDx(soapModel.getIcd9AdmittingDx());
		model.setIcd9PrincipalDx(soapModel.getIcd9PrincipalDx());
		model.setIcd9PrincipalProcedure(soapModel.getIcd9PrincipalProcedure());
		model.setOtherIcd9Dx1(soapModel.getOtherIcd9Dx1());
		model.setOtherIcd9Dx2(soapModel.getOtherIcd9Dx2());
		model.setOtherIcd9Dx3(soapModel.getOtherIcd9Dx3());
		model.setOtherIcd9Pcs1(soapModel.getOtherIcd9Pcs1());
		model.setOtherIcd9Pcs2(soapModel.getOtherIcd9Pcs2());
		model.setOtherIcd9Pcs3(soapModel.getOtherIcd9Pcs3());
		model.setIcd10AdmittingDx(soapModel.getIcd10AdmittingDx());
		model.setIcd10PrincipalDx(soapModel.getIcd10PrincipalDx());
		model.setIcd10PrincipalProcedure(soapModel.getIcd10PrincipalProcedure());
		model.setOtherIcd10Dx1(soapModel.getOtherIcd10Dx1());
		model.setOtherIcd10Dx2(soapModel.getOtherIcd10Dx2());
		model.setOtherIcd10Dx3(soapModel.getOtherIcd10Dx3());
		model.setOtherIcd10Pcs1(soapModel.getOtherIcd10Pcs1());
		model.setOtherIcd10Pcs2(soapModel.getOtherIcd10Pcs2());
		model.setOtherIcd10Pcs3(soapModel.getOtherIcd10Pcs3());
		model.setIsHistoryAndPsysical(soapModel.getIsHistoryAndPsysical());
		model.setIsDischargeNotes(soapModel.getIsDischargeNotes());
		model.setIsConsultations(soapModel.getIsConsultations());
		model.setIsOperatingNotes(soapModel.getIsOperatingNotes());
		model.setIsPhysicianNotes(soapModel.getIsPhysicianNotes());
		model.setIsRadiology(soapModel.getIsRadiology());
		model.setIsGiProcedures(soapModel.getIsGiProcedures());
		model.setIsEducationalNotes(soapModel.getIsEducationalNotes());
		model.setFile(soapModel.getFile());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<MedicalRecord> toModels(MedicalRecordSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<MedicalRecord> models = new ArrayList<MedicalRecord>(soapModels.length);

		for (MedicalRecordSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.virtusa.icd.service.builder.model.MedicalRecord"));

	public MedicalRecordModelImpl() {
	}

	public long getPrimaryKey() {
		return _mrId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMrId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_mrId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return MedicalRecord.class;
	}

	public String getModelClassName() {
		return MedicalRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("mrId", getMrId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("mrTestCaseName", getMrTestCaseName());
		attributes.put("msDrg", getMsDrg());
		attributes.put("patientType", getPatientType());
		attributes.put("patientAge", getPatientAge());
		attributes.put("los", getLos());
		attributes.put("ahrqCategoryCode", getAhrqCategoryCode());
		attributes.put("ahrqSubCategoryCode", getAhrqSubCategoryCode());
		attributes.put("mrTestCaseDescription", getMrTestCaseDescription());
		attributes.put("icd9AdmittingDx", getIcd9AdmittingDx());
		attributes.put("icd9PrincipalDx", getIcd9PrincipalDx());
		attributes.put("icd9PrincipalProcedure", getIcd9PrincipalProcedure());
		attributes.put("otherIcd9Dx1", getOtherIcd9Dx1());
		attributes.put("otherIcd9Dx2", getOtherIcd9Dx2());
		attributes.put("otherIcd9Dx3", getOtherIcd9Dx3());
		attributes.put("otherIcd9Pcs1", getOtherIcd9Pcs1());
		attributes.put("otherIcd9Pcs2", getOtherIcd9Pcs2());
		attributes.put("otherIcd9Pcs3", getOtherIcd9Pcs3());
		attributes.put("icd10AdmittingDx", getIcd10AdmittingDx());
		attributes.put("icd10PrincipalDx", getIcd10PrincipalDx());
		attributes.put("icd10PrincipalProcedure", getIcd10PrincipalProcedure());
		attributes.put("otherIcd10Dx1", getOtherIcd10Dx1());
		attributes.put("otherIcd10Dx2", getOtherIcd10Dx2());
		attributes.put("otherIcd10Dx3", getOtherIcd10Dx3());
		attributes.put("otherIcd10Pcs1", getOtherIcd10Pcs1());
		attributes.put("otherIcd10Pcs2", getOtherIcd10Pcs2());
		attributes.put("otherIcd10Pcs3", getOtherIcd10Pcs3());
		attributes.put("isHistoryAndPsysical", getIsHistoryAndPsysical());
		attributes.put("isDischargeNotes", getIsDischargeNotes());
		attributes.put("isConsultations", getIsConsultations());
		attributes.put("isOperatingNotes", getIsOperatingNotes());
		attributes.put("isPhysicianNotes", getIsPhysicianNotes());
		attributes.put("isRadiology", getIsRadiology());
		attributes.put("isGiProcedures", getIsGiProcedures());
		attributes.put("isEducationalNotes", getIsEducationalNotes());
		attributes.put("file", getFile());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long mrId = (Long)attributes.get("mrId");

		if (mrId != null) {
			setMrId(mrId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String mrTestCaseName = (String)attributes.get("mrTestCaseName");

		if (mrTestCaseName != null) {
			setMrTestCaseName(mrTestCaseName);
		}

		String msDrg = (String)attributes.get("msDrg");

		if (msDrg != null) {
			setMsDrg(msDrg);
		}

		String patientType = (String)attributes.get("patientType");

		if (patientType != null) {
			setPatientType(patientType);
		}

		String patientAge = (String)attributes.get("patientAge");

		if (patientAge != null) {
			setPatientAge(patientAge);
		}

		String los = (String)attributes.get("los");

		if (los != null) {
			setLos(los);
		}

		String ahrqCategoryCode = (String)attributes.get("ahrqCategoryCode");

		if (ahrqCategoryCode != null) {
			setAhrqCategoryCode(ahrqCategoryCode);
		}

		String ahrqSubCategoryCode = (String)attributes.get(
				"ahrqSubCategoryCode");

		if (ahrqSubCategoryCode != null) {
			setAhrqSubCategoryCode(ahrqSubCategoryCode);
		}

		String mrTestCaseDescription = (String)attributes.get(
				"mrTestCaseDescription");

		if (mrTestCaseDescription != null) {
			setMrTestCaseDescription(mrTestCaseDescription);
		}

		String icd9AdmittingDx = (String)attributes.get("icd9AdmittingDx");

		if (icd9AdmittingDx != null) {
			setIcd9AdmittingDx(icd9AdmittingDx);
		}

		String icd9PrincipalDx = (String)attributes.get("icd9PrincipalDx");

		if (icd9PrincipalDx != null) {
			setIcd9PrincipalDx(icd9PrincipalDx);
		}

		String icd9PrincipalProcedure = (String)attributes.get(
				"icd9PrincipalProcedure");

		if (icd9PrincipalProcedure != null) {
			setIcd9PrincipalProcedure(icd9PrincipalProcedure);
		}

		String otherIcd9Dx1 = (String)attributes.get("otherIcd9Dx1");

		if (otherIcd9Dx1 != null) {
			setOtherIcd9Dx1(otherIcd9Dx1);
		}

		String otherIcd9Dx2 = (String)attributes.get("otherIcd9Dx2");

		if (otherIcd9Dx2 != null) {
			setOtherIcd9Dx2(otherIcd9Dx2);
		}

		String otherIcd9Dx3 = (String)attributes.get("otherIcd9Dx3");

		if (otherIcd9Dx3 != null) {
			setOtherIcd9Dx3(otherIcd9Dx3);
		}

		String otherIcd9Pcs1 = (String)attributes.get("otherIcd9Pcs1");

		if (otherIcd9Pcs1 != null) {
			setOtherIcd9Pcs1(otherIcd9Pcs1);
		}

		String otherIcd9Pcs2 = (String)attributes.get("otherIcd9Pcs2");

		if (otherIcd9Pcs2 != null) {
			setOtherIcd9Pcs2(otherIcd9Pcs2);
		}

		String otherIcd9Pcs3 = (String)attributes.get("otherIcd9Pcs3");

		if (otherIcd9Pcs3 != null) {
			setOtherIcd9Pcs3(otherIcd9Pcs3);
		}

		String icd10AdmittingDx = (String)attributes.get("icd10AdmittingDx");

		if (icd10AdmittingDx != null) {
			setIcd10AdmittingDx(icd10AdmittingDx);
		}

		String icd10PrincipalDx = (String)attributes.get("icd10PrincipalDx");

		if (icd10PrincipalDx != null) {
			setIcd10PrincipalDx(icd10PrincipalDx);
		}

		String icd10PrincipalProcedure = (String)attributes.get(
				"icd10PrincipalProcedure");

		if (icd10PrincipalProcedure != null) {
			setIcd10PrincipalProcedure(icd10PrincipalProcedure);
		}

		String otherIcd10Dx1 = (String)attributes.get("otherIcd10Dx1");

		if (otherIcd10Dx1 != null) {
			setOtherIcd10Dx1(otherIcd10Dx1);
		}

		String otherIcd10Dx2 = (String)attributes.get("otherIcd10Dx2");

		if (otherIcd10Dx2 != null) {
			setOtherIcd10Dx2(otherIcd10Dx2);
		}

		String otherIcd10Dx3 = (String)attributes.get("otherIcd10Dx3");

		if (otherIcd10Dx3 != null) {
			setOtherIcd10Dx3(otherIcd10Dx3);
		}

		String otherIcd10Pcs1 = (String)attributes.get("otherIcd10Pcs1");

		if (otherIcd10Pcs1 != null) {
			setOtherIcd10Pcs1(otherIcd10Pcs1);
		}

		String otherIcd10Pcs2 = (String)attributes.get("otherIcd10Pcs2");

		if (otherIcd10Pcs2 != null) {
			setOtherIcd10Pcs2(otherIcd10Pcs2);
		}

		String otherIcd10Pcs3 = (String)attributes.get("otherIcd10Pcs3");

		if (otherIcd10Pcs3 != null) {
			setOtherIcd10Pcs3(otherIcd10Pcs3);
		}

		Boolean isHistoryAndPsysical = (Boolean)attributes.get(
				"isHistoryAndPsysical");

		if (isHistoryAndPsysical != null) {
			setIsHistoryAndPsysical(isHistoryAndPsysical);
		}

		Boolean isDischargeNotes = (Boolean)attributes.get("isDischargeNotes");

		if (isDischargeNotes != null) {
			setIsDischargeNotes(isDischargeNotes);
		}

		Boolean isConsultations = (Boolean)attributes.get("isConsultations");

		if (isConsultations != null) {
			setIsConsultations(isConsultations);
		}

		Boolean isOperatingNotes = (Boolean)attributes.get("isOperatingNotes");

		if (isOperatingNotes != null) {
			setIsOperatingNotes(isOperatingNotes);
		}

		Boolean isPhysicianNotes = (Boolean)attributes.get("isPhysicianNotes");

		if (isPhysicianNotes != null) {
			setIsPhysicianNotes(isPhysicianNotes);
		}

		Boolean isRadiology = (Boolean)attributes.get("isRadiology");

		if (isRadiology != null) {
			setIsRadiology(isRadiology);
		}

		Boolean isGiProcedures = (Boolean)attributes.get("isGiProcedures");

		if (isGiProcedures != null) {
			setIsGiProcedures(isGiProcedures);
		}

		Boolean isEducationalNotes = (Boolean)attributes.get(
				"isEducationalNotes");

		if (isEducationalNotes != null) {
			setIsEducationalNotes(isEducationalNotes);
		}

		String file = (String)attributes.get("file");

		if (file != null) {
			setFile(file);
		}
	}

	@JSON
	public long getMrId() {
		return _mrId;
	}

	public void setMrId(long mrId) {
		_mrId = mrId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getMrTestCaseName() {
		if (_mrTestCaseName == null) {
			return StringPool.BLANK;
		}
		else {
			return _mrTestCaseName;
		}
	}

	public void setMrTestCaseName(String mrTestCaseName) {
		_mrTestCaseName = mrTestCaseName;
	}

	@JSON
	public String getMsDrg() {
		if (_msDrg == null) {
			return StringPool.BLANK;
		}
		else {
			return _msDrg;
		}
	}

	public void setMsDrg(String msDrg) {
		_msDrg = msDrg;
	}

	@JSON
	public String getPatientType() {
		if (_patientType == null) {
			return StringPool.BLANK;
		}
		else {
			return _patientType;
		}
	}

	public void setPatientType(String patientType) {
		_patientType = patientType;
	}

	@JSON
	public String getPatientAge() {
		if (_patientAge == null) {
			return StringPool.BLANK;
		}
		else {
			return _patientAge;
		}
	}

	public void setPatientAge(String patientAge) {
		_patientAge = patientAge;
	}

	@JSON
	public String getLos() {
		if (_los == null) {
			return StringPool.BLANK;
		}
		else {
			return _los;
		}
	}

	public void setLos(String los) {
		_los = los;
	}

	@JSON
	public String getAhrqCategoryCode() {
		if (_ahrqCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ahrqCategoryCode;
		}
	}

	public void setAhrqCategoryCode(String ahrqCategoryCode) {
		_ahrqCategoryCode = ahrqCategoryCode;
	}

	@JSON
	public String getAhrqSubCategoryCode() {
		if (_ahrqSubCategoryCode == null) {
			return StringPool.BLANK;
		}
		else {
			return _ahrqSubCategoryCode;
		}
	}

	public void setAhrqSubCategoryCode(String ahrqSubCategoryCode) {
		_ahrqSubCategoryCode = ahrqSubCategoryCode;
	}

	@JSON
	public String getMrTestCaseDescription() {
		if (_mrTestCaseDescription == null) {
			return StringPool.BLANK;
		}
		else {
			return _mrTestCaseDescription;
		}
	}

	public void setMrTestCaseDescription(String mrTestCaseDescription) {
		_mrTestCaseDescription = mrTestCaseDescription;
	}

	@JSON
	public String getIcd9AdmittingDx() {
		if (_icd9AdmittingDx == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd9AdmittingDx;
		}
	}

	public void setIcd9AdmittingDx(String icd9AdmittingDx) {
		_icd9AdmittingDx = icd9AdmittingDx;
	}

	@JSON
	public String getIcd9PrincipalDx() {
		if (_icd9PrincipalDx == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd9PrincipalDx;
		}
	}

	public void setIcd9PrincipalDx(String icd9PrincipalDx) {
		_icd9PrincipalDx = icd9PrincipalDx;
	}

	@JSON
	public String getIcd9PrincipalProcedure() {
		if (_icd9PrincipalProcedure == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd9PrincipalProcedure;
		}
	}

	public void setIcd9PrincipalProcedure(String icd9PrincipalProcedure) {
		_icd9PrincipalProcedure = icd9PrincipalProcedure;
	}

	@JSON
	public String getOtherIcd9Dx1() {
		if (_otherIcd9Dx1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Dx1;
		}
	}

	public void setOtherIcd9Dx1(String otherIcd9Dx1) {
		_otherIcd9Dx1 = otherIcd9Dx1;
	}

	@JSON
	public String getOtherIcd9Dx2() {
		if (_otherIcd9Dx2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Dx2;
		}
	}

	public void setOtherIcd9Dx2(String otherIcd9Dx2) {
		_otherIcd9Dx2 = otherIcd9Dx2;
	}

	@JSON
	public String getOtherIcd9Dx3() {
		if (_otherIcd9Dx3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Dx3;
		}
	}

	public void setOtherIcd9Dx3(String otherIcd9Dx3) {
		_otherIcd9Dx3 = otherIcd9Dx3;
	}

	@JSON
	public String getOtherIcd9Pcs1() {
		if (_otherIcd9Pcs1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Pcs1;
		}
	}

	public void setOtherIcd9Pcs1(String otherIcd9Pcs1) {
		_otherIcd9Pcs1 = otherIcd9Pcs1;
	}

	@JSON
	public String getOtherIcd9Pcs2() {
		if (_otherIcd9Pcs2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Pcs2;
		}
	}

	public void setOtherIcd9Pcs2(String otherIcd9Pcs2) {
		_otherIcd9Pcs2 = otherIcd9Pcs2;
	}

	@JSON
	public String getOtherIcd9Pcs3() {
		if (_otherIcd9Pcs3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd9Pcs3;
		}
	}

	public void setOtherIcd9Pcs3(String otherIcd9Pcs3) {
		_otherIcd9Pcs3 = otherIcd9Pcs3;
	}

	@JSON
	public String getIcd10AdmittingDx() {
		if (_icd10AdmittingDx == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd10AdmittingDx;
		}
	}

	public void setIcd10AdmittingDx(String icd10AdmittingDx) {
		_icd10AdmittingDx = icd10AdmittingDx;
	}

	@JSON
	public String getIcd10PrincipalDx() {
		if (_icd10PrincipalDx == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd10PrincipalDx;
		}
	}

	public void setIcd10PrincipalDx(String icd10PrincipalDx) {
		_icd10PrincipalDx = icd10PrincipalDx;
	}

	@JSON
	public String getIcd10PrincipalProcedure() {
		if (_icd10PrincipalProcedure == null) {
			return StringPool.BLANK;
		}
		else {
			return _icd10PrincipalProcedure;
		}
	}

	public void setIcd10PrincipalProcedure(String icd10PrincipalProcedure) {
		_icd10PrincipalProcedure = icd10PrincipalProcedure;
	}

	@JSON
	public String getOtherIcd10Dx1() {
		if (_otherIcd10Dx1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Dx1;
		}
	}

	public void setOtherIcd10Dx1(String otherIcd10Dx1) {
		_otherIcd10Dx1 = otherIcd10Dx1;
	}

	@JSON
	public String getOtherIcd10Dx2() {
		if (_otherIcd10Dx2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Dx2;
		}
	}

	public void setOtherIcd10Dx2(String otherIcd10Dx2) {
		_otherIcd10Dx2 = otherIcd10Dx2;
	}

	@JSON
	public String getOtherIcd10Dx3() {
		if (_otherIcd10Dx3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Dx3;
		}
	}

	public void setOtherIcd10Dx3(String otherIcd10Dx3) {
		_otherIcd10Dx3 = otherIcd10Dx3;
	}

	@JSON
	public String getOtherIcd10Pcs1() {
		if (_otherIcd10Pcs1 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Pcs1;
		}
	}

	public void setOtherIcd10Pcs1(String otherIcd10Pcs1) {
		_otherIcd10Pcs1 = otherIcd10Pcs1;
	}

	@JSON
	public String getOtherIcd10Pcs2() {
		if (_otherIcd10Pcs2 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Pcs2;
		}
	}

	public void setOtherIcd10Pcs2(String otherIcd10Pcs2) {
		_otherIcd10Pcs2 = otherIcd10Pcs2;
	}

	@JSON
	public String getOtherIcd10Pcs3() {
		if (_otherIcd10Pcs3 == null) {
			return StringPool.BLANK;
		}
		else {
			return _otherIcd10Pcs3;
		}
	}

	public void setOtherIcd10Pcs3(String otherIcd10Pcs3) {
		_otherIcd10Pcs3 = otherIcd10Pcs3;
	}

	@JSON
	public boolean getIsHistoryAndPsysical() {
		return _isHistoryAndPsysical;
	}

	public boolean isIsHistoryAndPsysical() {
		return _isHistoryAndPsysical;
	}

	public void setIsHistoryAndPsysical(boolean isHistoryAndPsysical) {
		_isHistoryAndPsysical = isHistoryAndPsysical;
	}

	@JSON
	public boolean getIsDischargeNotes() {
		return _isDischargeNotes;
	}

	public boolean isIsDischargeNotes() {
		return _isDischargeNotes;
	}

	public void setIsDischargeNotes(boolean isDischargeNotes) {
		_isDischargeNotes = isDischargeNotes;
	}

	@JSON
	public boolean getIsConsultations() {
		return _isConsultations;
	}

	public boolean isIsConsultations() {
		return _isConsultations;
	}

	public void setIsConsultations(boolean isConsultations) {
		_isConsultations = isConsultations;
	}

	@JSON
	public boolean getIsOperatingNotes() {
		return _isOperatingNotes;
	}

	public boolean isIsOperatingNotes() {
		return _isOperatingNotes;
	}

	public void setIsOperatingNotes(boolean isOperatingNotes) {
		_isOperatingNotes = isOperatingNotes;
	}

	@JSON
	public boolean getIsPhysicianNotes() {
		return _isPhysicianNotes;
	}

	public boolean isIsPhysicianNotes() {
		return _isPhysicianNotes;
	}

	public void setIsPhysicianNotes(boolean isPhysicianNotes) {
		_isPhysicianNotes = isPhysicianNotes;
	}

	@JSON
	public boolean getIsRadiology() {
		return _isRadiology;
	}

	public boolean isIsRadiology() {
		return _isRadiology;
	}

	public void setIsRadiology(boolean isRadiology) {
		_isRadiology = isRadiology;
	}

	@JSON
	public boolean getIsGiProcedures() {
		return _isGiProcedures;
	}

	public boolean isIsGiProcedures() {
		return _isGiProcedures;
	}

	public void setIsGiProcedures(boolean isGiProcedures) {
		_isGiProcedures = isGiProcedures;
	}

	@JSON
	public boolean getIsEducationalNotes() {
		return _isEducationalNotes;
	}

	public boolean isIsEducationalNotes() {
		return _isEducationalNotes;
	}

	public void setIsEducationalNotes(boolean isEducationalNotes) {
		_isEducationalNotes = isEducationalNotes;
	}

	@JSON
	public String getFile() {
		if (_file == null) {
			return StringPool.BLANK;
		}
		else {
			return _file;
		}
	}

	public void setFile(String file) {
		_file = file;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			MedicalRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public MedicalRecord toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (MedicalRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MedicalRecordImpl medicalRecordImpl = new MedicalRecordImpl();

		medicalRecordImpl.setMrId(getMrId());
		medicalRecordImpl.setGroupId(getGroupId());
		medicalRecordImpl.setCompanyId(getCompanyId());
		medicalRecordImpl.setUserId(getUserId());
		medicalRecordImpl.setUserName(getUserName());
		medicalRecordImpl.setCreateDate(getCreateDate());
		medicalRecordImpl.setModifiedDate(getModifiedDate());
		medicalRecordImpl.setMrTestCaseName(getMrTestCaseName());
		medicalRecordImpl.setMsDrg(getMsDrg());
		medicalRecordImpl.setPatientType(getPatientType());
		medicalRecordImpl.setPatientAge(getPatientAge());
		medicalRecordImpl.setLos(getLos());
		medicalRecordImpl.setAhrqCategoryCode(getAhrqCategoryCode());
		medicalRecordImpl.setAhrqSubCategoryCode(getAhrqSubCategoryCode());
		medicalRecordImpl.setMrTestCaseDescription(getMrTestCaseDescription());
		medicalRecordImpl.setIcd9AdmittingDx(getIcd9AdmittingDx());
		medicalRecordImpl.setIcd9PrincipalDx(getIcd9PrincipalDx());
		medicalRecordImpl.setIcd9PrincipalProcedure(getIcd9PrincipalProcedure());
		medicalRecordImpl.setOtherIcd9Dx1(getOtherIcd9Dx1());
		medicalRecordImpl.setOtherIcd9Dx2(getOtherIcd9Dx2());
		medicalRecordImpl.setOtherIcd9Dx3(getOtherIcd9Dx3());
		medicalRecordImpl.setOtherIcd9Pcs1(getOtherIcd9Pcs1());
		medicalRecordImpl.setOtherIcd9Pcs2(getOtherIcd9Pcs2());
		medicalRecordImpl.setOtherIcd9Pcs3(getOtherIcd9Pcs3());
		medicalRecordImpl.setIcd10AdmittingDx(getIcd10AdmittingDx());
		medicalRecordImpl.setIcd10PrincipalDx(getIcd10PrincipalDx());
		medicalRecordImpl.setIcd10PrincipalProcedure(getIcd10PrincipalProcedure());
		medicalRecordImpl.setOtherIcd10Dx1(getOtherIcd10Dx1());
		medicalRecordImpl.setOtherIcd10Dx2(getOtherIcd10Dx2());
		medicalRecordImpl.setOtherIcd10Dx3(getOtherIcd10Dx3());
		medicalRecordImpl.setOtherIcd10Pcs1(getOtherIcd10Pcs1());
		medicalRecordImpl.setOtherIcd10Pcs2(getOtherIcd10Pcs2());
		medicalRecordImpl.setOtherIcd10Pcs3(getOtherIcd10Pcs3());
		medicalRecordImpl.setIsHistoryAndPsysical(getIsHistoryAndPsysical());
		medicalRecordImpl.setIsDischargeNotes(getIsDischargeNotes());
		medicalRecordImpl.setIsConsultations(getIsConsultations());
		medicalRecordImpl.setIsOperatingNotes(getIsOperatingNotes());
		medicalRecordImpl.setIsPhysicianNotes(getIsPhysicianNotes());
		medicalRecordImpl.setIsRadiology(getIsRadiology());
		medicalRecordImpl.setIsGiProcedures(getIsGiProcedures());
		medicalRecordImpl.setIsEducationalNotes(getIsEducationalNotes());
		medicalRecordImpl.setFile(getFile());

		medicalRecordImpl.resetOriginalValues();

		return medicalRecordImpl;
	}

	public int compareTo(MedicalRecord medicalRecord) {
		long primaryKey = medicalRecord.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		MedicalRecord medicalRecord = null;

		try {
			medicalRecord = (MedicalRecord)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = medicalRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<MedicalRecord> toCacheModel() {
		MedicalRecordCacheModel medicalRecordCacheModel = new MedicalRecordCacheModel();

		medicalRecordCacheModel.mrId = getMrId();

		medicalRecordCacheModel.groupId = getGroupId();

		medicalRecordCacheModel.companyId = getCompanyId();

		medicalRecordCacheModel.userId = getUserId();

		medicalRecordCacheModel.userName = getUserName();

		String userName = medicalRecordCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			medicalRecordCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			medicalRecordCacheModel.createDate = createDate.getTime();
		}
		else {
			medicalRecordCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			medicalRecordCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			medicalRecordCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		medicalRecordCacheModel.mrTestCaseName = getMrTestCaseName();

		String mrTestCaseName = medicalRecordCacheModel.mrTestCaseName;

		if ((mrTestCaseName != null) && (mrTestCaseName.length() == 0)) {
			medicalRecordCacheModel.mrTestCaseName = null;
		}

		medicalRecordCacheModel.msDrg = getMsDrg();

		String msDrg = medicalRecordCacheModel.msDrg;

		if ((msDrg != null) && (msDrg.length() == 0)) {
			medicalRecordCacheModel.msDrg = null;
		}

		medicalRecordCacheModel.patientType = getPatientType();

		String patientType = medicalRecordCacheModel.patientType;

		if ((patientType != null) && (patientType.length() == 0)) {
			medicalRecordCacheModel.patientType = null;
		}

		medicalRecordCacheModel.patientAge = getPatientAge();

		String patientAge = medicalRecordCacheModel.patientAge;

		if ((patientAge != null) && (patientAge.length() == 0)) {
			medicalRecordCacheModel.patientAge = null;
		}

		medicalRecordCacheModel.los = getLos();

		String los = medicalRecordCacheModel.los;

		if ((los != null) && (los.length() == 0)) {
			medicalRecordCacheModel.los = null;
		}

		medicalRecordCacheModel.ahrqCategoryCode = getAhrqCategoryCode();

		String ahrqCategoryCode = medicalRecordCacheModel.ahrqCategoryCode;

		if ((ahrqCategoryCode != null) && (ahrqCategoryCode.length() == 0)) {
			medicalRecordCacheModel.ahrqCategoryCode = null;
		}

		medicalRecordCacheModel.ahrqSubCategoryCode = getAhrqSubCategoryCode();

		String ahrqSubCategoryCode = medicalRecordCacheModel.ahrqSubCategoryCode;

		if ((ahrqSubCategoryCode != null) &&
				(ahrqSubCategoryCode.length() == 0)) {
			medicalRecordCacheModel.ahrqSubCategoryCode = null;
		}

		medicalRecordCacheModel.mrTestCaseDescription = getMrTestCaseDescription();

		String mrTestCaseDescription = medicalRecordCacheModel.mrTestCaseDescription;

		if ((mrTestCaseDescription != null) &&
				(mrTestCaseDescription.length() == 0)) {
			medicalRecordCacheModel.mrTestCaseDescription = null;
		}

		medicalRecordCacheModel.icd9AdmittingDx = getIcd9AdmittingDx();

		String icd9AdmittingDx = medicalRecordCacheModel.icd9AdmittingDx;

		if ((icd9AdmittingDx != null) && (icd9AdmittingDx.length() == 0)) {
			medicalRecordCacheModel.icd9AdmittingDx = null;
		}

		medicalRecordCacheModel.icd9PrincipalDx = getIcd9PrincipalDx();

		String icd9PrincipalDx = medicalRecordCacheModel.icd9PrincipalDx;

		if ((icd9PrincipalDx != null) && (icd9PrincipalDx.length() == 0)) {
			medicalRecordCacheModel.icd9PrincipalDx = null;
		}

		medicalRecordCacheModel.icd9PrincipalProcedure = getIcd9PrincipalProcedure();

		String icd9PrincipalProcedure = medicalRecordCacheModel.icd9PrincipalProcedure;

		if ((icd9PrincipalProcedure != null) &&
				(icd9PrincipalProcedure.length() == 0)) {
			medicalRecordCacheModel.icd9PrincipalProcedure = null;
		}

		medicalRecordCacheModel.otherIcd9Dx1 = getOtherIcd9Dx1();

		String otherIcd9Dx1 = medicalRecordCacheModel.otherIcd9Dx1;

		if ((otherIcd9Dx1 != null) && (otherIcd9Dx1.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Dx1 = null;
		}

		medicalRecordCacheModel.otherIcd9Dx2 = getOtherIcd9Dx2();

		String otherIcd9Dx2 = medicalRecordCacheModel.otherIcd9Dx2;

		if ((otherIcd9Dx2 != null) && (otherIcd9Dx2.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Dx2 = null;
		}

		medicalRecordCacheModel.otherIcd9Dx3 = getOtherIcd9Dx3();

		String otherIcd9Dx3 = medicalRecordCacheModel.otherIcd9Dx3;

		if ((otherIcd9Dx3 != null) && (otherIcd9Dx3.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Dx3 = null;
		}

		medicalRecordCacheModel.otherIcd9Pcs1 = getOtherIcd9Pcs1();

		String otherIcd9Pcs1 = medicalRecordCacheModel.otherIcd9Pcs1;

		if ((otherIcd9Pcs1 != null) && (otherIcd9Pcs1.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Pcs1 = null;
		}

		medicalRecordCacheModel.otherIcd9Pcs2 = getOtherIcd9Pcs2();

		String otherIcd9Pcs2 = medicalRecordCacheModel.otherIcd9Pcs2;

		if ((otherIcd9Pcs2 != null) && (otherIcd9Pcs2.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Pcs2 = null;
		}

		medicalRecordCacheModel.otherIcd9Pcs3 = getOtherIcd9Pcs3();

		String otherIcd9Pcs3 = medicalRecordCacheModel.otherIcd9Pcs3;

		if ((otherIcd9Pcs3 != null) && (otherIcd9Pcs3.length() == 0)) {
			medicalRecordCacheModel.otherIcd9Pcs3 = null;
		}

		medicalRecordCacheModel.icd10AdmittingDx = getIcd10AdmittingDx();

		String icd10AdmittingDx = medicalRecordCacheModel.icd10AdmittingDx;

		if ((icd10AdmittingDx != null) && (icd10AdmittingDx.length() == 0)) {
			medicalRecordCacheModel.icd10AdmittingDx = null;
		}

		medicalRecordCacheModel.icd10PrincipalDx = getIcd10PrincipalDx();

		String icd10PrincipalDx = medicalRecordCacheModel.icd10PrincipalDx;

		if ((icd10PrincipalDx != null) && (icd10PrincipalDx.length() == 0)) {
			medicalRecordCacheModel.icd10PrincipalDx = null;
		}

		medicalRecordCacheModel.icd10PrincipalProcedure = getIcd10PrincipalProcedure();

		String icd10PrincipalProcedure = medicalRecordCacheModel.icd10PrincipalProcedure;

		if ((icd10PrincipalProcedure != null) &&
				(icd10PrincipalProcedure.length() == 0)) {
			medicalRecordCacheModel.icd10PrincipalProcedure = null;
		}

		medicalRecordCacheModel.otherIcd10Dx1 = getOtherIcd10Dx1();

		String otherIcd10Dx1 = medicalRecordCacheModel.otherIcd10Dx1;

		if ((otherIcd10Dx1 != null) && (otherIcd10Dx1.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Dx1 = null;
		}

		medicalRecordCacheModel.otherIcd10Dx2 = getOtherIcd10Dx2();

		String otherIcd10Dx2 = medicalRecordCacheModel.otherIcd10Dx2;

		if ((otherIcd10Dx2 != null) && (otherIcd10Dx2.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Dx2 = null;
		}

		medicalRecordCacheModel.otherIcd10Dx3 = getOtherIcd10Dx3();

		String otherIcd10Dx3 = medicalRecordCacheModel.otherIcd10Dx3;

		if ((otherIcd10Dx3 != null) && (otherIcd10Dx3.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Dx3 = null;
		}

		medicalRecordCacheModel.otherIcd10Pcs1 = getOtherIcd10Pcs1();

		String otherIcd10Pcs1 = medicalRecordCacheModel.otherIcd10Pcs1;

		if ((otherIcd10Pcs1 != null) && (otherIcd10Pcs1.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Pcs1 = null;
		}

		medicalRecordCacheModel.otherIcd10Pcs2 = getOtherIcd10Pcs2();

		String otherIcd10Pcs2 = medicalRecordCacheModel.otherIcd10Pcs2;

		if ((otherIcd10Pcs2 != null) && (otherIcd10Pcs2.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Pcs2 = null;
		}

		medicalRecordCacheModel.otherIcd10Pcs3 = getOtherIcd10Pcs3();

		String otherIcd10Pcs3 = medicalRecordCacheModel.otherIcd10Pcs3;

		if ((otherIcd10Pcs3 != null) && (otherIcd10Pcs3.length() == 0)) {
			medicalRecordCacheModel.otherIcd10Pcs3 = null;
		}

		medicalRecordCacheModel.isHistoryAndPsysical = getIsHistoryAndPsysical();

		medicalRecordCacheModel.isDischargeNotes = getIsDischargeNotes();

		medicalRecordCacheModel.isConsultations = getIsConsultations();

		medicalRecordCacheModel.isOperatingNotes = getIsOperatingNotes();

		medicalRecordCacheModel.isPhysicianNotes = getIsPhysicianNotes();

		medicalRecordCacheModel.isRadiology = getIsRadiology();

		medicalRecordCacheModel.isGiProcedures = getIsGiProcedures();

		medicalRecordCacheModel.isEducationalNotes = getIsEducationalNotes();

		medicalRecordCacheModel.file = getFile();

		String file = medicalRecordCacheModel.file;

		if ((file != null) && (file.length() == 0)) {
			medicalRecordCacheModel.file = null;
		}

		return medicalRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(85);

		sb.append("{mrId=");
		sb.append(getMrId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", mrTestCaseName=");
		sb.append(getMrTestCaseName());
		sb.append(", msDrg=");
		sb.append(getMsDrg());
		sb.append(", patientType=");
		sb.append(getPatientType());
		sb.append(", patientAge=");
		sb.append(getPatientAge());
		sb.append(", los=");
		sb.append(getLos());
		sb.append(", ahrqCategoryCode=");
		sb.append(getAhrqCategoryCode());
		sb.append(", ahrqSubCategoryCode=");
		sb.append(getAhrqSubCategoryCode());
		sb.append(", mrTestCaseDescription=");
		sb.append(getMrTestCaseDescription());
		sb.append(", icd9AdmittingDx=");
		sb.append(getIcd9AdmittingDx());
		sb.append(", icd9PrincipalDx=");
		sb.append(getIcd9PrincipalDx());
		sb.append(", icd9PrincipalProcedure=");
		sb.append(getIcd9PrincipalProcedure());
		sb.append(", otherIcd9Dx1=");
		sb.append(getOtherIcd9Dx1());
		sb.append(", otherIcd9Dx2=");
		sb.append(getOtherIcd9Dx2());
		sb.append(", otherIcd9Dx3=");
		sb.append(getOtherIcd9Dx3());
		sb.append(", otherIcd9Pcs1=");
		sb.append(getOtherIcd9Pcs1());
		sb.append(", otherIcd9Pcs2=");
		sb.append(getOtherIcd9Pcs2());
		sb.append(", otherIcd9Pcs3=");
		sb.append(getOtherIcd9Pcs3());
		sb.append(", icd10AdmittingDx=");
		sb.append(getIcd10AdmittingDx());
		sb.append(", icd10PrincipalDx=");
		sb.append(getIcd10PrincipalDx());
		sb.append(", icd10PrincipalProcedure=");
		sb.append(getIcd10PrincipalProcedure());
		sb.append(", otherIcd10Dx1=");
		sb.append(getOtherIcd10Dx1());
		sb.append(", otherIcd10Dx2=");
		sb.append(getOtherIcd10Dx2());
		sb.append(", otherIcd10Dx3=");
		sb.append(getOtherIcd10Dx3());
		sb.append(", otherIcd10Pcs1=");
		sb.append(getOtherIcd10Pcs1());
		sb.append(", otherIcd10Pcs2=");
		sb.append(getOtherIcd10Pcs2());
		sb.append(", otherIcd10Pcs3=");
		sb.append(getOtherIcd10Pcs3());
		sb.append(", isHistoryAndPsysical=");
		sb.append(getIsHistoryAndPsysical());
		sb.append(", isDischargeNotes=");
		sb.append(getIsDischargeNotes());
		sb.append(", isConsultations=");
		sb.append(getIsConsultations());
		sb.append(", isOperatingNotes=");
		sb.append(getIsOperatingNotes());
		sb.append(", isPhysicianNotes=");
		sb.append(getIsPhysicianNotes());
		sb.append(", isRadiology=");
		sb.append(getIsRadiology());
		sb.append(", isGiProcedures=");
		sb.append(getIsGiProcedures());
		sb.append(", isEducationalNotes=");
		sb.append(getIsEducationalNotes());
		sb.append(", file=");
		sb.append(getFile());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(130);

		sb.append("<model><model-name>");
		sb.append("com.virtusa.icd.service.builder.model.MedicalRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>mrId</column-name><column-value><![CDATA[");
		sb.append(getMrId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mrTestCaseName</column-name><column-value><![CDATA[");
		sb.append(getMrTestCaseName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>msDrg</column-name><column-value><![CDATA[");
		sb.append(getMsDrg());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patientType</column-name><column-value><![CDATA[");
		sb.append(getPatientType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>patientAge</column-name><column-value><![CDATA[");
		sb.append(getPatientAge());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>los</column-name><column-value><![CDATA[");
		sb.append(getLos());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ahrqCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getAhrqCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ahrqSubCategoryCode</column-name><column-value><![CDATA[");
		sb.append(getAhrqSubCategoryCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mrTestCaseDescription</column-name><column-value><![CDATA[");
		sb.append(getMrTestCaseDescription());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd9AdmittingDx</column-name><column-value><![CDATA[");
		sb.append(getIcd9AdmittingDx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd9PrincipalDx</column-name><column-value><![CDATA[");
		sb.append(getIcd9PrincipalDx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd9PrincipalProcedure</column-name><column-value><![CDATA[");
		sb.append(getIcd9PrincipalProcedure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Dx1</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Dx1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Dx2</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Dx2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Dx3</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Dx3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Pcs1</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Pcs1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Pcs2</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Pcs2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd9Pcs3</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd9Pcs3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd10AdmittingDx</column-name><column-value><![CDATA[");
		sb.append(getIcd10AdmittingDx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd10PrincipalDx</column-name><column-value><![CDATA[");
		sb.append(getIcd10PrincipalDx());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>icd10PrincipalProcedure</column-name><column-value><![CDATA[");
		sb.append(getIcd10PrincipalProcedure());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Dx1</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Dx1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Dx2</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Dx2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Dx3</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Dx3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Pcs1</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Pcs1());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Pcs2</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Pcs2());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>otherIcd10Pcs3</column-name><column-value><![CDATA[");
		sb.append(getOtherIcd10Pcs3());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isHistoryAndPsysical</column-name><column-value><![CDATA[");
		sb.append(getIsHistoryAndPsysical());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isDischargeNotes</column-name><column-value><![CDATA[");
		sb.append(getIsDischargeNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isConsultations</column-name><column-value><![CDATA[");
		sb.append(getIsConsultations());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isOperatingNotes</column-name><column-value><![CDATA[");
		sb.append(getIsOperatingNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isPhysicianNotes</column-name><column-value><![CDATA[");
		sb.append(getIsPhysicianNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isRadiology</column-name><column-value><![CDATA[");
		sb.append(getIsRadiology());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isGiProcedures</column-name><column-value><![CDATA[");
		sb.append(getIsGiProcedures());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>isEducationalNotes</column-name><column-value><![CDATA[");
		sb.append(getIsEducationalNotes());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>file</column-name><column-value><![CDATA[");
		sb.append(getFile());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = MedicalRecord.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			MedicalRecord.class
		};
	private long _mrId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _mrTestCaseName;
	private String _msDrg;
	private String _patientType;
	private String _patientAge;
	private String _los;
	private String _ahrqCategoryCode;
	private String _ahrqSubCategoryCode;
	private String _mrTestCaseDescription;
	private String _icd9AdmittingDx;
	private String _icd9PrincipalDx;
	private String _icd9PrincipalProcedure;
	private String _otherIcd9Dx1;
	private String _otherIcd9Dx2;
	private String _otherIcd9Dx3;
	private String _otherIcd9Pcs1;
	private String _otherIcd9Pcs2;
	private String _otherIcd9Pcs3;
	private String _icd10AdmittingDx;
	private String _icd10PrincipalDx;
	private String _icd10PrincipalProcedure;
	private String _otherIcd10Dx1;
	private String _otherIcd10Dx2;
	private String _otherIcd10Dx3;
	private String _otherIcd10Pcs1;
	private String _otherIcd10Pcs2;
	private String _otherIcd10Pcs3;
	private boolean _isHistoryAndPsysical;
	private boolean _isDischargeNotes;
	private boolean _isConsultations;
	private boolean _isOperatingNotes;
	private boolean _isPhysicianNotes;
	private boolean _isRadiology;
	private boolean _isGiProcedures;
	private boolean _isEducationalNotes;
	private String _file;
	private MedicalRecord _escapedModelProxy;
}