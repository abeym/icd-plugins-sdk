/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.virtusa.icd.service.builder.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.virtusa.icd.service.builder.model.References;
import com.virtusa.icd.service.builder.model.ReferencesModel;
import com.virtusa.icd.service.builder.model.ReferencesSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the References service. Represents a row in the &quot;ICD_References&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.virtusa.icd.service.builder.model.ReferencesModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReferencesImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReferencesImpl
 * @see com.virtusa.icd.service.builder.model.References
 * @see com.virtusa.icd.service.builder.model.ReferencesModel
 * @generated
 */
@JSON(strict = true)
public class ReferencesModelImpl extends BaseModelImpl<References>
	implements ReferencesModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a references model instance should use the {@link com.virtusa.icd.service.builder.model.References} interface instead.
	 */
	public static final String TABLE_NAME = "ICD_References";
	public static final Object[][] TABLE_COLUMNS = {
			{ "referencesId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "referencesName", Types.VARCHAR },
			{ "key_", Types.VARCHAR },
			{ "value", Types.VARCHAR },
			{ "active_", Types.VARCHAR },
			{ "order_", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table ICD_References (referencesId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,referencesName VARCHAR(75) null,key_ VARCHAR(75) null,value VARCHAR(75) null,active_ VARCHAR(75) null,order_ INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table ICD_References";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.virtusa.icd.service.builder.model.References"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.virtusa.icd.service.builder.model.References"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.virtusa.icd.service.builder.model.References"),
			true);
	public static long REFERENCESNAME_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static References toModel(ReferencesSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		References model = new ReferencesImpl();

		model.setReferencesId(soapModel.getReferencesId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setReferencesName(soapModel.getReferencesName());
		model.setKey(soapModel.getKey());
		model.setValue(soapModel.getValue());
		model.setActive(soapModel.getActive());
		model.setOrder(soapModel.getOrder());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<References> toModels(ReferencesSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<References> models = new ArrayList<References>(soapModels.length);

		for (ReferencesSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.virtusa.icd.service.builder.model.References"));

	public ReferencesModelImpl() {
	}

	public long getPrimaryKey() {
		return _referencesId;
	}

	public void setPrimaryKey(long primaryKey) {
		setReferencesId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_referencesId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return References.class;
	}

	public String getModelClassName() {
		return References.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("referencesId", getReferencesId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("referencesName", getReferencesName());
		attributes.put("key", getKey());
		attributes.put("value", getValue());
		attributes.put("active", getActive());
		attributes.put("order", getOrder());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long referencesId = (Long)attributes.get("referencesId");

		if (referencesId != null) {
			setReferencesId(referencesId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String referencesName = (String)attributes.get("referencesName");

		if (referencesName != null) {
			setReferencesName(referencesName);
		}

		String key = (String)attributes.get("key");

		if (key != null) {
			setKey(key);
		}

		String value = (String)attributes.get("value");

		if (value != null) {
			setValue(value);
		}

		String active = (String)attributes.get("active");

		if (active != null) {
			setActive(active);
		}

		Integer order = (Integer)attributes.get("order");

		if (order != null) {
			setOrder(order);
		}
	}

	@JSON
	public long getReferencesId() {
		return _referencesId;
	}

	public void setReferencesId(long referencesId) {
		_referencesId = referencesId;
	}

	@JSON
	public long getGroupId() {
		return _groupId;
	}

	public void setGroupId(long groupId) {
		_groupId = groupId;
	}

	@JSON
	public long getCompanyId() {
		return _companyId;
	}

	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	public Date getCreateDate() {
		return _createDate;
	}

	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	public String getReferencesName() {
		if (_referencesName == null) {
			return StringPool.BLANK;
		}
		else {
			return _referencesName;
		}
	}

	public void setReferencesName(String referencesName) {
		_columnBitmask |= REFERENCESNAME_COLUMN_BITMASK;

		if (_originalReferencesName == null) {
			_originalReferencesName = _referencesName;
		}

		_referencesName = referencesName;
	}

	public String getOriginalReferencesName() {
		return GetterUtil.getString(_originalReferencesName);
	}

	@JSON
	public String getKey() {
		if (_key == null) {
			return StringPool.BLANK;
		}
		else {
			return _key;
		}
	}

	public void setKey(String key) {
		_key = key;
	}

	@JSON
	public String getValue() {
		if (_value == null) {
			return StringPool.BLANK;
		}
		else {
			return _value;
		}
	}

	public void setValue(String value) {
		_value = value;
	}

	@JSON
	public String getActive() {
		if (_active == null) {
			return StringPool.BLANK;
		}
		else {
			return _active;
		}
	}

	public void setActive(String active) {
		_active = active;
	}

	@JSON
	public int getOrder() {
		return _order;
	}

	public void setOrder(int order) {
		_order = order;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			References.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public References toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (References)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		ReferencesImpl referencesImpl = new ReferencesImpl();

		referencesImpl.setReferencesId(getReferencesId());
		referencesImpl.setGroupId(getGroupId());
		referencesImpl.setCompanyId(getCompanyId());
		referencesImpl.setUserId(getUserId());
		referencesImpl.setUserName(getUserName());
		referencesImpl.setCreateDate(getCreateDate());
		referencesImpl.setModifiedDate(getModifiedDate());
		referencesImpl.setReferencesName(getReferencesName());
		referencesImpl.setKey(getKey());
		referencesImpl.setValue(getValue());
		referencesImpl.setActive(getActive());
		referencesImpl.setOrder(getOrder());

		referencesImpl.resetOriginalValues();

		return referencesImpl;
	}

	public int compareTo(References references) {
		long primaryKey = references.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		References references = null;

		try {
			references = (References)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = references.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		ReferencesModelImpl referencesModelImpl = this;

		referencesModelImpl._originalReferencesName = referencesModelImpl._referencesName;

		referencesModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<References> toCacheModel() {
		ReferencesCacheModel referencesCacheModel = new ReferencesCacheModel();

		referencesCacheModel.referencesId = getReferencesId();

		referencesCacheModel.groupId = getGroupId();

		referencesCacheModel.companyId = getCompanyId();

		referencesCacheModel.userId = getUserId();

		referencesCacheModel.userName = getUserName();

		String userName = referencesCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			referencesCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			referencesCacheModel.createDate = createDate.getTime();
		}
		else {
			referencesCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			referencesCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			referencesCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		referencesCacheModel.referencesName = getReferencesName();

		String referencesName = referencesCacheModel.referencesName;

		if ((referencesName != null) && (referencesName.length() == 0)) {
			referencesCacheModel.referencesName = null;
		}

		referencesCacheModel.key = getKey();

		String key = referencesCacheModel.key;

		if ((key != null) && (key.length() == 0)) {
			referencesCacheModel.key = null;
		}

		referencesCacheModel.value = getValue();

		String value = referencesCacheModel.value;

		if ((value != null) && (value.length() == 0)) {
			referencesCacheModel.value = null;
		}

		referencesCacheModel.active = getActive();

		String active = referencesCacheModel.active;

		if ((active != null) && (active.length() == 0)) {
			referencesCacheModel.active = null;
		}

		referencesCacheModel.order = getOrder();

		return referencesCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{referencesId=");
		sb.append(getReferencesId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", referencesName=");
		sb.append(getReferencesName());
		sb.append(", key=");
		sb.append(getKey());
		sb.append(", value=");
		sb.append(getValue());
		sb.append(", active=");
		sb.append(getActive());
		sb.append(", order=");
		sb.append(getOrder());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.virtusa.icd.service.builder.model.References");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>referencesId</column-name><column-value><![CDATA[");
		sb.append(getReferencesId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referencesName</column-name><column-value><![CDATA[");
		sb.append(getReferencesName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>key</column-name><column-value><![CDATA[");
		sb.append(getKey());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>value</column-name><column-value><![CDATA[");
		sb.append(getValue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>active</column-name><column-value><![CDATA[");
		sb.append(getActive());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>order</column-name><column-value><![CDATA[");
		sb.append(getOrder());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = References.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			References.class
		};
	private long _referencesId;
	private long _groupId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private String _referencesName;
	private String _originalReferencesName;
	private String _key;
	private String _value;
	private String _active;
	private int _order;
	private long _columnBitmask;
	private References _escapedModelProxy;
}